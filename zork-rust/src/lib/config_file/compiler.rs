///! file for represent the available configuration properties within Zork++
///! for setting up the target compiler
/// 
/// ## TODO LIST
///! TODO -> Convert this attribute into a collection of this attribute,
/// allowing Zork++ to compile one project for multiple compilers
/// at the same time

use serde::Deserialize;

/// [`CompilerAttribute`] - Configuration properties for 
/// targeting one of the available compilers within Zork++
/// 
/// * `cpp_compiler` - One of the available compilers within Zork++
/// They are represented by an enumerated type named [`CppCompiler`],
/// that holds the different options where the user can choose
/// 
/// * `extra_args` - A comma separated list of strings that will be passed
/// to the generated command lines. This ones here will be placed in every
/// command line generated by Zork++.
/// 
/// For example, if *['-O3', '-Wall']*
/// are specified here, this will be wired in the main command line (the executable),
/// the ones generated for compile modules (both interfaces and implementations)
/// and for the command line generated for build the specified test suite and
/// the test executableÃ§
/// 
/// * `system_headers_path` - An string indicating a user custom defined place
/// where the system headers lives.
/// 
/// ### Tests
/// 
/// ```rust
/// use zork::config_file::compiler::{
///     CompilerAttribute, CppCompiler
/// };
/// 
/// const CONFIG_FILE_MOCK: &str = r#"
///     #[compiler]
///     cpp_compiler = 'CLANG'
///     extra_args = ['-O3', '-Wall']
///"#;
///
/// let config: CompilerAttribute = toml::from_str(CONFIG_FILE_MOCK)
///    .expect("A failure happened parsing the Zork toml file");
///
/// assert_eq!(config.cpp_compiler, CppCompiler::CLANG);
/// assert_eq!(config.extra_args, Some(vec!["-O3", "-Wall"]));
/// assert_eq!(config.system_headers_path, None);
/// ```
/// 
/// > Note: TOML table are toml commented (#) to allow us to parse
/// the inner attributes as the direct type that they belongs to.
/// That commented tables aren't the real TOML, they are just there
/// for testing and exemplification purposes of the inner attributes
/// of the configuration file. 
/// 
/// For a test over a real example, please look at the
/// [`zork::config_file::ZorkConfigFile`] doc-test
#[derive(Deserialize, Debug, PartialEq)]
pub struct CompilerAttribute<'a> {
    pub cpp_compiler: CppCompiler,
    #[serde(borrow)] pub extra_args: Option<Vec<&'a str>>,
    #[serde(borrow)] pub system_headers_path: Option<&'a str>
}

/// The C++ compilers available within Zork++
#[derive(Deserialize, Debug, Clone, PartialEq)]
pub enum CppCompiler {
    #[serde(alias="CLANG", alias="Clang", alias="clang")]
    CLANG,
    #[serde(alias="MSVC", alias="Msvc", alias="msvc")]
    MSVC,
    #[serde(alias="GCC", alias="Gcc", alias="gcc")]
    GCC
    // Possible future interesting on support the Intel's C++ compiler?
}